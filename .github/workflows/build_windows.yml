name: CMake on multiple platforms - windows

on:
  workflow_dispatch

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [windows-latest]
        build_type: [Release]
        include:
          - os: windows-latest
            openmp: ON
            serial: OFF
    steps:
    - uses: actions/checkout@v4

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: 3.11

    - name: Install dependencies
      env:
        PYTHONPATH: ${{ steps.strings.outputs.build-output-dir }}/python
      run: |
        python -m pip install --upgrade pip
        pip install pytest
        # Released version of pyttb is too old, so we need to build from the github repo
        #pip install pyttb
        mkdir pyttb
        cd pyttb
        git clone https://github.com/sandialabs/pyttb.git
        cd pyttb
        pip install .

    - name: Install mkl
      shell: cmd
      run: |
        on
        REM SPDX-FileCopyrightText: 2022 Intel Corporation
        REM
        REM SPDX-License-Identifier: MIT
        set URL=https://registrationcenter-download.intel.com/akdlm/IRC_NAS/d91caaa0-7306-46ea-a519-79a0423e1903/w_BaseKit_p_2024.2.1.101_offline.exe
        set COMPONENTS=intel.oneapi.win.mkl.devel
        curl.exe --output %TEMP%\webimage.exe --url %URL% --retry 5 --retry-delay 5
        start /b /wait %TEMP%\webimage.exe -s -x -f webimage_extracted --log extract.log
        del %TEMP%\webimage.exe
        webimage_extracted\bootstrapper.exe -s --action install --components=%COMPONENTS% --eula=accept -p=NEED_VS2017_INTEGRATION=0 -p=NEED_VS2019_INTEGRATION=0 -p=NEED_VS2022_INTEGRATION=0 --log-dir=.
        set installer_exit_code=%ERRORLEVEL%
        rd /s/q "webimage_extracted"
        exit /b %installer_exit_code%
        
    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: |
        . /opt/intel/oneapi/mkl/latest/env/vars.sh
        cmake -B ${{ steps.strings.outputs.build-output-dir }} \
        -DBUILD_SHARED_LIBS=ON \
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
        -DKokkos_ENABLE_OPENMP=${{ matrix.openmp }} \
        -DKokkos_ENABLE_SERIAL=${{ matrix.serial }} \
        -DENABLE_PYTHON=ON \
        -S ${{ github.workspace }}

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      env:
        PYTHONPATH: ${{ steps.strings.outputs.build-output-dir }}/python
      # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest --build-config ${{ matrix.build_type }} --output-on-failure
