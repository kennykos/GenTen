# Experimental workflow to build on windows. The workflow is working properly:
# OpenBlas was used in place of BLAS/LAPACK, and installed using this link: https://sourceforge.net/projects/openblas/files/v0.3.29/OpenBLAS-0.3.29_x64.zip
# It was then added to the path to allow Windows to find its dll.
# MKL was initially used in place of OpenBlas, but could not work because of its inability to locate dll dependencies.
# -DF77_BLAS_MANGLE='(name,NAME) name' command is used in the cmake configuration file to ensure that the linker can correctly find and link Fortran BLAS functions.

name: CMake on multiple platforms - windows

on:
  workflow_dispatch

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      matrix:
        os: [windows-latest]
        build_type: [Release]
        include:
          - os: windows-latest
            openmp: OFF
            serial: ON
    steps:
    - uses: actions/checkout@v4

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: 3.11

    - name: Install dependencies
      #env:
        #PYTHONPATH: ${{ steps.strings.outputs.build-output-dir }}/python
      run: |
        python -m pip install --upgrade pip
        pip install pytest pyttb
   
    # - name: Install mkl
    #   shell: cmd
    #   run: |
    #     REM SPDX-FileCopyrightText: 2022 Intel Corporation
    #     REM
    #     REM SPDX-License-Identifier: MIT
    #     set URL=https://registrationcenter-download.intel.com/akdlm/IRC_NAS/d91caaa0-7306-46ea-a519-79a0423e1903/w_BaseKit_p_2024.2.1.101_offline.exe
    #     set COMPONENTS=intel.oneapi.win.mkl.devel
    #     curl.exe --output %TEMP%\webimage.exe --url %URL% --retry 5 --retry-delay 5
    #     start /b /wait %TEMP%\webimage.exe -s -x -f webimage_extracted --log extract.log
    #     del %TEMP%\webimage.exe
    #     webimage_extracted\bootstrapper.exe -s --action install --components=%COMPONENTS% --eula=accept -p=NEED_VS2017_INTEGRATION=0 -p=NEED_VS2019_INTEGRATION=0 -p=NEED_VS2022_INTEGRATION=0 --log-dir=.
    #     set installer_exit_code=%ERRORLEVEL%
    #     rd /s/q "webimage_extracted"
    #     exit /b %installer_exit_code%
        
    # - name: Setup environment
    #   shell: cmd
    #   run: |
    #      "c:\Program Files (x86)\Intel\oneAPI\setvars.bat"
    #      set > $GITHUB_ENV

    - name: Install OpenBLAS
      shell: cmd
      run: |
        mkdir openblas
        cd openblas
        curl -o openblas.zip -L --ssl-no-revoke --url https://sourceforge.net/projects/openblas/files/v0.3.29/OpenBLAS-0.3.29_x64.zip
        unzip openblas.zip

    - name: Add OpenBLAS to path so Windows can find its DLLs
      shell: bash
      run: echo "${{ github.workspace }}/openblas/bin" >> "$GITHUB_PATH"
        
    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      #env:
      #  MKLROOT: c:\Program Files (x86)\Intel\oneAPI\mkl\latest
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -T ClangCL
        -DCMAKE_CXX_COMPILER=clang-cl
        -DCMAKE_C_COMPILER=clang-cl
        -DBUILD_SHARED_LIBS=OFF
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -DKokkos_ENABLE_OPENMP=${{ matrix.openmp }}
        -DKokkos_ENABLE_SERIAL=${{ matrix.serial }}
        -DENABLE_PYTHON=ON
        -DF77_BLAS_MANGLE='(name,NAME) name'
        -DLAPACK_LIBS=${{ github.workspace }}/openblas/lib/libopenblas.lib
        -S ${{ github.workspace }}

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Test
      shell: bash
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      env:
        PYTHONPATH: ${{ steps.strings.outputs.build-output-dir }}/python
        GENTEN_DLL_PATH: ${{ github.workspace }}/openblas/bin
      # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: |
        echo "$GENTEN_DLL_PATH"
        ls $GENTEN_DLL_PATH
        ctest --build-config ${{ matrix.build_type }} --output-on-failure
